{-# START_FILE {{name}}.cabal #-}
name:                {{name}}
version:             0
synopsis:            Initial project template from stack
description:         See README.md
homepage:            https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme
license:             BSD3
license-file:        LICENSE.md
author:              {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer:          {{author-email}}{{^author-email}}example@example.com{{/author-email}}
copyright:           {{copyright}}{{^copyright}}{{year}}{{^year}}2016{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}
category:            {{category}}{{^category}}Web{{/category}}
build-type:          Simple
-- extra-source-files:
cabal-version:       >=1.10

library
    hs-source-dirs:      src
    exposed-modules:     Lib
    build-depends:       base >= 4.7 && < 5
    default-language:    Haskell2010
    ghc-options:         -Wall

executable {{name}}-exe
    hs-source-dirs:      app
    main-is:             Main.hs
    ghc-options:         -threaded -rtsopts -with-rtsopts=-N -Wall
    build-depends:       base
                       , {{name}}
    default-language:    Haskell2010

test-suite {{name}}-test
    type:                exitcode-stdio-1.0
    hs-source-dirs:      test
    main-is:             Test.hs
    build-depends:       base
                       , {{name}}
    ghc-options:         -threaded -rtsopts -with-rtsopts=-N -Wall
    default-language:    Haskell2010

source-repository head
  type:     git
  location: https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}



{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain



{-# START_FILE test/Test.hs #-}
main :: IO ()
main = putStrLn "Test suite not yet implemented"



{-# START_FILE src/Lib.hs #-}
module Lib (someFunc) where

someFunc :: IO ()
someFunc = putStrLn "someFunc"



{-# START_FILE app/Main.hs #-}
module Main where

import Lib

main :: IO ()
main = someFunc



{-# START_FILE LICENSE.md #-}
BSD-3 license
=============

Written by {{author-name}}{{^author-name}}Author name here{{/author-name}} in {{year}}{{^year}}2016{{/year}}. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  - Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.

  - Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

  - Neither the name of {{author-name}}{{^author-name}}Author name here{{/author-name}} nor the names of other contributors may
    be used to endorse or promote products derived from this software without
    specific prior written permission.

This software is provided by the copyright holders and contributors »as is« and
any express or implied warranties, including, but not limited to, the implied
warranties of merchantability and fitness for a particular purpose are
disclaimed. In no event shall the copyright owner or contributors be liable for
any direct, indirect, incidental, special, exemplary, or consequential damages
(including, but not limited to, procurement of substitute goods or services;
loss of use, data, or profits; or business interruption) however caused and on
any theory of liability, whether in contract, strict liability, or tort
(including negligence or otherwise) arising in any way out of the use of this
software, even if advised of the possibility of such damage.



{-# START_FILE HLint.hs #-}
import "hint" HLint.Default
import "hint" HLint.Builtin.All

-- Avoiding lambdas is not always a good idea if you keep in mind that GHC's
-- inliner will only consider fully applied functions.
ignore "Avoid lambda"

-- Naming can be useful
ignore "Eta reduce"
ignore "Redundant lambda"
ignore "Use const"

-- Sometimes, it can make code more readable if underscores are allowed as a
-- form of a "large" separator. For example, one might give all tests the prefix
-- "test_", followed by a camel-case test name.
ignore "Use camelCase"

--
ignore "Use fromMaybe"

-- I have no idea why "if" is even in Haskell. I certainly do not encourage
-- using it (over a simple "case").
ignore "Use if"

-- Obfuscation much?
ignore "Use uncurry"

-- AMP fallout
error "generalize mapM"  = mapM  ==> traverse
error "generalize mapM_" = mapM_ ==> traverse_
error "generalize forM"  = forM  ==> for
error "generalize forM_" = forM_ ==> for_
error "Avoid return" =
    return ==> pure
    where note = "return is obsolete as of GHC 7.10"

-- Avoid operator soup
error "Use parentheses instead of ($)" = f $ x ==> ()



{-# START_FILE .stylish-haskell.yaml #-}
# stylish-haskell configuration file
# ==================================

# The stylish-haskell tool is mainly configured by specifying steps. These steps
# are a list, so they have an order, and one specific step may appear more than
# once (if needed). Each file is processed by these steps in the given order.
steps:
  # Convert some ASCII sequences to their Unicode equivalents. This is disabled
  # by default.
  # - unicode_syntax:
  #     # In order to make this work, we also need to insert the UnicodeSyntax
  #     # language pragma. If this flag is set to true, we insert it when it's
  #     # not already present. You may want to disable it if you configure
  #     # language extensions using some other method than pragmas. Default:
  #     # true.
  #     add_language_pragma: true

  # Import cleanup
  - imports:
      # There are different ways we can align names and lists.
      #
      # - global: Align the import names and import list throughout the entire
      #   file.
      #
      # - file: Like global, but don't add padding when there are no qualified
      #   imports in the file.
      #
      # - group: Only align the imports per group (a group is formed by adjacent
      #   import lines).
      #
      # - none: Do not perform any alignment.
      #
      # Default: global.
      align: group

      # Folowing options affect only import list alignment.
      #
      # List align has following options:
      #
      # - after_alias: Import list is aligned with end of import including
      #   'as' and 'hiding' keywords.
      #
      #   > import qualified Data.List      as List (concat, foldl, foldr, head,
      #   >                                          init, last, length)
      #
      # - with_alias: Import list is aligned with start of alias or hiding.
      #
      #   > import qualified Data.List      as List (concat, foldl, foldr, head,
      #   >                                 init, last, length)
      #
      # - new_line: Import list starts always on new line.
      #
      #   > import qualified Data.List      as List
      #   >     (concat, foldl, foldr, head, init, last, length)
      #
      # Default: after alias
      list_align: after_alias

      # Long list align style takes effect when import is too long. This is
      # determined by 'columns' setting.
      #
      # - inline: This option will put as much specs on same line as possible.
      #
      # - new_line: Import list will start on new line.
      #
      # - new_line_multiline: Import list will start on new line when it's
      #   short enough to fit to single line. Otherwise it'll be multiline.
      #
      # - multiline: One line per import list entry.
      #   Type with contructor list acts like single import.
      #
      #   > import qualified Data.Map as M
      #   >     ( empty
      #   >     , singleton
      #   >     , ...
      #   >     , delete
      #   >     )
      #
      # Default: inline
      long_list_align: new_line_multiline

      # List padding determines indentation of import list on lines after import.
      # This option affects 'list_align' and 'long_list_align'.
      list_padding: 4

      # Separate lists option affects formating of import list for type
      # or class. The only difference is single space between type and list
      # of constructors, selectors and class functions.
      #
      # - true: There is single space between Foldable type and list of it's
      #   functions.
      #
      #   > import Data.Foldable (Foldable (fold, foldl, foldMap))
      #
      # - false: There is no space between Foldable type and list of it's
      #   functions.
      #
      #   > import Data.Foldable (Foldable(fold, foldl, foldMap))
      #
      # Default: true
      separate_lists: true

  # Language pragmas
  - language_pragmas:
      # We can generate different styles of language pragma lists.
      #
      # - vertical: Vertical-spaced language pragmas, one per line.
      #
      # - compact: A more compact style.
      #
      # - compact_line: Similar to compact, but wrap each line with
      #   `{-#LANGUAGE #-}'.
      #
      # Default: vertical.
      style: vertical

      # Align affects alignment of closing pragma brackets.
      #
      # - true: Brackets are aligned in same collumn.
      #
      # - false: Brackets are not aligned together. There is only one space
      #   between actual import and closing bracket.
      #
      # Default: true
      align: true

      # stylish-haskell can detect redundancy of some language pragmas. If this
      # is set to true, it will remove those redundant pragmas. Default: true.
      remove_redundant: true

  # Align the types in record declarations
  # - records: {}

  # Replace tabs by spaces. This is disabled by default.
  # - tabs:
  #     # Number of spaces to use for each tab. Default: 8, as specified by the
  #     # Haskell report.
  #     spaces: 8

  # Remove trailing whitespace
  - trailing_whitespace: {}

# A common setting is the number of columns (parts of) code will be wrapped
# to. Different steps take this into account. Default: 80.
columns: 80

# Sometimes, language extensions are specified in a cabal file or from the
# command line instead of using language pragmas in the file. stylish-haskell
# needs to be aware of these, so it can parse the file correctly.
#
# No language extensions are enabled by default.
# language_extensions:
  # - TemplateHaskell
  # - QuasiQuotes



{-# START_FILE .gitignore #-}
# Stack
.stack-work

# Cabal
dist
.cabal-sandbox
cabal.sandbox.config

# Profiling
*.tix