#!/usr/bin/env python3

import itertools
import sys
import json
import argparse
from typing import *


def drop_until(delimiter, input):
    return itertools.dropwhile(lambda char: char != delimiter, input)


def decode_json_prefix(input: str) -> Optional[Tuple[Any, int]]:
    try:
        decoder = json.JSONDecoder()
        valid_json, end_offset = decoder.raw_decode(s=input)
        remaining_input = input[end_offset:]
        return valid_json, remaining_input
    except json.JSONDecodeError:
        return None


def extract_all_valid_json(input: str, report_empty_objects: bool) -> List[Any]:
    all_jsons = []
    while len(input) > 0:
        # Ensure we’re starting at a curly. Python’s JSON library would otherwise
        # report e.g. "hello" as valid JSON.
        if input[0] != '{':
            input = ''.join(drop_until('{', input))
        try:
            valid_json, input = decode_json_prefix(input)
            if valid_json or report_empty_objects:
                all_jsons.append(valid_json)
        except TypeError:
            # Even though input started with a curly, it doesn’t have a valid JSON
            # prefix. Happens when there’s a random curly, which we’ll drop here.
            input = input[1:]

    return all_jsons


def all_stdin() -> str:
    return ''.join(sys.stdin)


def parse_args():
    parser = argparse.ArgumentParser(description = "Find all contained JSON documents inside STDIN")
    parser.add_argument("--empty-objects", action="store_true", help="Report even empty JSON objects")
    parser.add_argument("--tests", action="store_true", help="Run testsuite instead of analyzing input")
    return parser.parse_args()


def main():
    args = parse_args()

    if args.tests:
        print("Running testsuite")
        testsuite()
    else:
        input = all_stdin()
        result = extract_all_valid_json(input, report_empty_objects=args.empty_objects)
        if len(result) > 0:
            print('\n'.join(map(lambda x: json.dumps(x), result)))
            sys.exit(0)
        else:
            sys.exit(1)


def test(input, report_empty_objects, expected):
    actual = extract_all_valid_json(input, report_empty_objects=report_empty_objects)
    expected = json.loads(expected)

    if actual != expected:
        print(f"FAIL: {input}\n\tActual: {actual}\n\tExpected: {expected}")
        return True
    else:
        print(f"Success: {input}\n\tFound: {actual}")
        return False


def testsuite():
    any_errors = False
    any_errors |= test('123'                                                 , False, '[]')
    any_errors |= test('"hello"'                                             , False, '[]')
    any_errors |= test('{"hello": 123}'                                      , False, '[{"hello": 123}]')
    any_errors |= test('Leading gibberish {"hello": 123}'                    , False, '[{"hello": 123}]')
    any_errors |= test('{"hello": 123} trailing gibberish'                   , False, '[{"hello": 123}]')
    any_errors |= test('Leading gibberish {"hello": 123} trailing gibberish' , False, '[{"hello": 123}]')
    any_errors |= test('Gibberish with { {"hello": 123} gibberish'           , False, '[{"hello": 123}]')
    any_errors |= test('Ignore empty objects {}{} gibberish'                 , False, '[]')
    any_errors |= test('Show empty objects {}{} gibberish'                   , True,  '[{}, {}]')
    any_errors |= test('Show {} empty objects {"hello": 123} {}gibberish'    , True,  '[{}, {"hello": 123}, {}]')
    any_errors |= test('Multiple {"hello": 123} jsons {"world": 567} gibberish' , False, '[{"hello": 123}, {"world": 567}]')
    sys.exit(1 if any_errors else 0)


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(1)
