#!/usr/bin/env python3

# pylint: skip-file

import argparse
import re
import sys

evenWords = ["aardvark", "absurd", "accrue", "acme", "adrift", "adult",
    "afflict", "ahead", "aimless", "Algol", "allow", "alone", "ammo", "ancient",
    "apple", "artist", "assume", "Athens", "atlas", "Aztec", "baboon",
    "backfield", "backward", "banjo", "beaming", "bedlamp", "beehive",
    "beeswax", "befriend", "Belfast", "berserk", "billiard", "bison",
    "blackjack", "blockade", "blowtorch", "bluebird", "bombast", "bookshelf",
    "brackish", "breadline", "breakup", "brickyard", "briefcase", "Burbank",
    "button", "buzzard", "cement", "chairlift", "chatter", "checkup", "chisel",
    "choking", "chopper", "Christmas", "clamshell", "classic", "classroom",
    "cleanup", "clockwork", "cobra", "commence", "concert", "cowbell",
    "crackdown", "cranky", "crowfoot", "crucial", "crumpled", "crusade",
    "cubic", "dashboard", "deadbolt", "deckhand", "dogsled", "dragnet",
    "drainage", "dreadful", "drifter", "dropper", "drumbeat", "drunken",
    "Dupont", "dwelling", "eating", "edict", "egghead", "eightball", "endorse",
    "endow", "enlist", "erase", "escape", "exceed", "eyeglass", "eyetooth",
    "facial", "fallout", "flagpole", "flatfoot", "flytrap", "fracture",
    "framework", "freedom", "frighten", "gazelle", "Geiger", "glitter",
    "glucose", "goggles", "goldfish", "gremlin", "guidance", "hamlet",
    "highchair", "hockey", "indoors", "indulge", "inverse", "involve", "island",
    "jawbone", "keyboard", "kickoff", "kiwi", "klaxon", "locale", "lockup",
    "merit", "minnow", "miser", "Mohawk", "mural", "music", "necklace",
    "Neptune", "newborn", "nightbird", "Oakland", "obtuse", "offload", "optic",
    "orca", "payday", "peachy", "pheasant", "physique", "playhouse", "Pluto",
    "preclude", "prefer", "preshrunk", "printer", "prowler", "pupil", "puppy",
    "python", "quadrant", "quiver", "quota", "ragtime", "ratchet", "rebirth",
    "reform", "regain", "reindeer", "rematch", "repay", "retouch", "revenge",
    "reward", "rhythm", "ribcage", "ringbolt", "robust", "rocker", "ruffled",
    "sailboat", "sawdust", "scallion", "scenic", "scorecard", "Scotland",
    "seabird", "select", "sentence", "shadow", "shamrock", "showgirl",
    "skullcap", "skydive", "slingshot", "slowdown", "snapline", "snapshot",
    "snowcap", "snowslide", "solo", "southward", "soybean", "spaniel",
    "spearhead", "spellbind", "spheroid", "spigot", "spindle", "spyglass",
    "stagehand", "stagnate", "stairway", "standard", "stapler", "steamship",
    "sterling", "stockman", "stopwatch", "stormy", "sugar", "surmount",
    "suspense", "sweatband", "swelter", "tactics", "talon", "tapeworm",
    "tempest", "tiger", "tissue", "tonic", "topmost", "tracker", "transit",
    "trauma", "treadmill", "Trojan", "trouble", "tumor", "tunnel", "tycoon",
    "uncut", "unearth", "unwind", "uproot", "upset", "upshot", "vapor",
    "village", "virus", "Vulcan", "waffle", "wallet", "watchword", "wayside",
    "willow", "woodlark", "Zulu"]

oddWords = ["adroitness", "adviser", "aftermath", "aggregate", "alkali",
    "almighty", "amulet", "amusement", "antenna", "applicant", "Apollo",
    "armistice", "article", "asteroid", "Atlantic", "atmosphere", "autopsy",
    "Babylon", "backwater", "barbecue", "belowground", "bifocals", "bodyguard",
    "bookseller", "borderline", "bottomless", "Bradbury", "bravado",
    "Brazilian", "breakaway", "Burlington", "businessman", "butterfat",
    "Camelot", "candidate", "cannonball", "Capricorn", "caravan", "caretaker",
    "celebrate", "cellulose", "certify", "chambermaid", "Cherokee", "Chicago",
    "clergyman", "coherence", "combustion", "commando", "company", "component",
    "concurrent", "confidence", "conformist", "congregate", "consensus",
    "consulting", "corporate", "corrosion", "councilman", "crossover",
    "crucifix", "cumbersome", "customer", "Dakota", "decadence", "December",
    "decimal", "designing", "detector", "detergent", "determine", "dictator",
    "dinosaur", "direction", "disable", "disbelief", "disruptive", "distortion",
    "document", "embezzle", "enchanting", "enrollment", "enterprise",
    "equation", "equipment", "escapade", "Eskimo", "everyday", "examine",
    "existence", "exodus", "fascinate", "filament", "finicky", "forever",
    "fortitude", "frequency", "gadgetry", "Galveston", "getaway", "glossary",
    "gossamer", "graduate", "gravity", "guitarist", "hamburger", "Hamilton",
    "handiwork", "hazardous", "headwaters", "hemisphere", "hesitate",
    "hideaway", "holiness", "hurricane", "hydraulic", "impartial", "impetus",
    "inception", "indigo", "inertia", "infancy", "inferno", "informant",
    "insincere", "insurgent", "integrate", "intention", "inventive", "Istanbul",
    "Jamaica", "Jupiter", "leprosy", "letterhead", "liberty", "maritime",
    "matchmaker", "maverick", "Medusa", "megaton", "microscope", "microwave",
    "midsummer", "millionaire", "miracle", "misnomer", "molasses", "molecule",
    "Montana", "monument", "mosquito", "narrative", "nebula", "newsletter",
    "Norwegian", "October", "Ohio", "onlooker", "opulent", "Orlando",
    "outfielder", "Pacific", "pandemic", "Pandora", "paperweight", "paragon",
    "paragraph", "paramount", "passenger", "pedigree", "Pegasus", "penetrate",
    "perceptive", "performance", "pharmacy", "phonetic", "photograph",
    "pioneer", "pocketful", "politeness", "positive", "potato", "processor",
    "provincial", "proximate", "puberty", "publisher", "pyramid", "quantity",
    "racketeer", "rebellion", "recipe", "recover", "repellent", "replica",
    "reproduce", "resistor", "responsive", "retraction", "retrieval",
    "retrospect", "revenue", "revival", "revolver", "sandalwood", "sardonic",
    "Saturday", "savagery", "scavenger", "sensation", "sociable", "souvenir",
    "specialist", "speculate", "stethoscope", "stupendous", "supportive",
    "surrender", "suspicious", "sympathy", "tambourine", "telephone",
    "therapist", "tobacco", "tolerance", "tomorrow", "torpedo", "tradition",
    "travesty", "trombonist", "truncated", "typewriter", "ultimate",
    "undaunted", "underfoot", "unicorn", "unify", "universe", "unravel",
    "upcoming", "vacancy", "vagabond", "vertigo", "Virginia", "visitor",
    "vocalist", "voyager", "warranty", "Waterloo", "whimsical", "Wichita",
    "Wilmington", "Wyoming", "yesteryear", "Yucatan"]

def encode(bytestring):
    result = ""
    goodParity, badParity = evenWords, oddWords
    for byte in bytestring:
        word = goodParity[byte]
        if result:
            result += " "
        result += word
        goodParity, badParity = badParity, goodParity
    return result

def tokenizeNormalize(input):
    result = input
    result = re.sub(r"\W+", " ", result) # Replace all non-letters with single whitespace
    result = result.lower().strip()
    result = result.split()
    result = map(lambda x: x.strip(), result) # Strip individual words
    result = filter(lambda x: x, result) # Filter out empty entries (probably unnecessary because of the regex above)
    result = list(result)
    return result

def decode(input):
    evenWordsDecode = { word.lower(): i for i, word in enumerate(evenWords) }
    oddWordsDecode = { word.lower(): i for i, word in enumerate(oddWords) }
    goodParity, badParity = evenWordsDecode, oddWordsDecode
    result = ""
    for word in tokenizeNormalize(input):
        value = goodParity.get(word)
        if value is not None:
            result += chr(value)
        elif badParity.get(word):
            raise ValueError(f"Bad word parity: {word}")
        else:
            raise ValueError(f"Unrecognized word: {word}")
        goodParity, badParity = badParity, goodParity

    return result

def parseArgs():
    parser = argparse.ArgumentParser(description = "PGP Wordlist encoder/decoder")
    parser.add_argument("-d", "--decode", action = "store_true")
    return parser.parse_args()

def main():
    try:
        args = parseArgs()
        if args.decode:
            print(decode(sys.stdin.read()), end = "")
        else:
            print(encode(sys.stdin.buffer.read()), end = "")
    except ValueError as e:
        print("Error: " + str(e))
        sys.exit(1)

if __name__ == '__main__':
    main()
