#!/usr/bin/env python3

# { gibberish() {cat /dev/urandom | tr -dc '[:print:]' | head -c"${1:-100}"}; gibberish; jq -nMcj '{hello: {world: 123}}'; gibberish }


import fileinput
import itertools
import sys
import json
from typing import *


def drop_until(delimiter, input):
    return itertools.dropwhile(lambda char: char != delimiter, input)


def decode_json_prefix(input: str):
    try:
        decoder = json.JSONDecoder()
        valid_json, end_offset = decoder.raw_decode(s=input)
        remaining_input = input[end_offset:]
        return json.dumps(valid_json), remaining_input
    except json.JSONDecodeError:
        return None

def extract_first_valid_json(input: str):
    while input != '':
        if input[0] != '{':
            input = ''.join(drop_until('{', input))
        result = decode_json_prefix(input)
        if result is not None:
            return result
        input = ''.join(drop_until('{', input[1:]))
    return None

def extract_all_valid_json(input: str):
    all_jsons = []
    while input != '':
        result = extract_first_valid_json(input)
        if result is not None:
            valid_json, remaining_input = result
            all_jsons.append(valid_json)
            input = remaining_input
        else:
            break
    return all_jsons



def stdin_firehose() -> str:
    return ''.join(fileinput.input())


def main():
    input = stdin_firehose()
    result = extract_all_valid_json(input)
    if len(result) > 0:
        print('\n'.join(result))
        sys.exit(0)
    else:
        sys.exit(1)


def test(input, expected):
    actual = list(map(lambda x: json.loads(x), extract_all_valid_json(input)))
    expected = json.loads(expected)

    if actual != expected:
        print(f"FAIL: {input}\n\tActual: {actual}\n\tExpected: {expected}")
    else:
        print(f"Success: {input}\n\tFound: {actual}")


def testsuite():
    test('123'                                                 , '[]')
    test('"hello"'                                             , '[]')
    test('{"hello": 123}'                                      , '[{"hello": 123}]')
    test('Leading gibberish {"hello": 123}'                    , '[{"hello": 123}]')
    test('{"hello": 123} trailing gibberish'                   , '[{"hello": 123}]')
    test('Leading gibberish {"hello": 123} trailing gibberish' , '[{"hello": 123}]')
    test('Gibberish with { {"hello": 123} gibberish'           , '[{"hello": 123}]')
    test('Multiple valid documents {}{} gibberish'             , '[{}, {}]')


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(1)
