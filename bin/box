#!/usr/bin/env python3

import sys
import argparse

class CustomFormatter(argparse.ArgumentDefaultsHelpFormatter,
                      argparse.RawDescriptionHelpFormatter
                      ):
    pass

def parseCommandLineArgs():
    parser = argparse.ArgumentParser(
        description="Put text in a box. Lines are first read from the command line, and then from STDIN.",
        epilog="\n".join(
            ["Example:"
            , ""
            , "echo five | $0 --hpad 2 one \"two three\" four --style unicode-round"
            , drawBox(["one", "two three", "four", "five"], hPad=2, vPad=0, **styles["unicode-round"])]),
        formatter_class=CustomFormatter
        )
    parser.add_argument("--hpad" , type=int , default=1 , help="Horizontal padding in spaces" , metavar="h")
    parser.add_argument("--vpad" , type=int , default=0 , help="Vertical padding in lines"    , metavar="w")
    parser.add_argument("--style", choices=styles.keys(), default="unicode-round")
    parser.add_argument("content", nargs="*", help="Lines, prefixed to STDIN lines", metavar="line")
    return parser.parse_args()

def inputLines(args):
    result = []
    for arg in args.content:
        for argSplit in arg.split("\n"):
            result.append(argSplit)
    if not sys.stdin.isatty():
        for line in sys.stdin:
            result.append(line.rstrip("\n"))
    return result

def mimic(input):
    symbols = ""
    current = None
    for char in input:
        if char != current and not char.isspace() and not char.isalnum():
            symbols = symbols + char
            current = char
    return {
        "topLeft":     symbols[0],
        "topRight":    symbols[2],
        "bottomLeft":  symbols[4],
        "bottomRight": symbols[6],
        "vertical":    symbols[3],
        "horizontal":  symbols[1]
    }

styles = {
    "ascii": mimic("""
        +-------+
        | style |
        +-------+ """),
    "unicode-round": mimic("""
        ╭───────╮
        │ style │
        ╰───────╯ """),
    "unicode": mimic("""
        ┌───────┐
        │ style │
        └───────┘ """),
    "unicode-bold": mimic("""
        ┏━━━━━━━┓
        ┃ style ┃
        ┗━━━━━━━┛ """),
    "unicode-double": mimic("""
        ╔═══════╗
        ║ style ║
        ╚═══════╝ """)
}

def style(args):
    result = styles.get(args.style)
    if not result:
        raise ValueError(f"Unrecognized style: {args.style}")
    return result


def drawBox(lines, topLeft, topRight, bottomLeft, bottomRight, vertical, horizontal, hPad, vPad):

    numLines = len(lines)
    longestLine = max(0, max(map(len, lines))) if lines else 0

    fillWith = lambda string, width: (string * width)[0:width]

    result = []
    result.append(f"{topLeft}{fillWith(horizontal, longestLine+2*hPad)}{topRight}")
    for _ in range(vPad):
        result.append(f"{vertical}{fillWith(' ', longestLine+2*hPad)}{vertical}")
    for line in lines:
        result.append(f"{vertical}{hPad * ' '}{line}{fillWith(' ', longestLine - len(line))}{hPad * ' '}{vertical}")
    for _ in range(vPad):
        result.append(f"{vertical}{fillWith(' ', longestLine+2*hPad)}{vertical}")
    result.append(f"{bottomLeft}{fillWith(horizontal, longestLine+2*hPad)}{bottomRight}")
    return "\n".join(result)

def main():
    args = parseCommandLineArgs()
    input = inputLines(args)
    boxString = drawBox(
        **style(args),
        hPad        = args.hpad,
        vPad        = args.vpad,
        lines       = input
        )
    print(boxString)

if __name__ == '__main__':
    main()
